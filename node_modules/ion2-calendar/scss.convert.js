"use strict";

let fs = require('fs');
let pathUtil = require('path');
let sass = require('node-sass');

let genPath = pathUtil.join(__dirname, 'src');
let handledLessFileCount = 0;
let scssFilePool = [];
let tsFileTester = /\.ts$/;
let stylesRegex = /styleUrls *:(\s*\[[^\]]*?\])/g;
let stringRegex = /(['"])((?:[^\\]\\\1|.)*?)\1/g;
let scssNumRegex = /style_(\d+)_scss/g;

function getTsFile(path, parse) {
    try {
        if (fs.statSync(path).isFile() && tsFileTester.test(path)) {
            parse(path)
        } else if (fs.statSync(path).isDirectory()) {
            let paths = fs.readdirSync(path);
            paths.forEach(function (p) {
                getTsFile(pathUtil.join(path, p), parse);
            })
        }
    } catch (err) {
        throw err;
    }
}

function transformStyleUrls(path) {
    let content = fs.readFileSync(path);
    if (stylesRegex.test(content)) {
        let contentTemp = content.toString().replace(stylesRegex, function (match, urls) {
            return "styles:" + urls.replace(stringRegex, function (match, quote, url) {
                scssFilePool.push(pathUtil.resolve(pathUtil.dirname(path), url));
                let result = 'style_' + handledLessFileCount + '_scss';
                handledLessFileCount += 1;
                return result;
            })
        });
        fs.writeFileSync(path, contentTemp);
    }
}

function doneOne() {
    handledLessFileCount += 1;
    if (handledLessFileCount === scssFilePool.length) {
        writeBack();
    }
}

function writeBack() {
    console.log("start to write back");
    getTsFile(genPath, writeBackCss);
    console.log('Done');
}

function writeBackCss(path) {
    let content = fs.readFileSync(path);
    if (scssNumRegex.test(content)) {
        let contentTemp = content.toString().replace(scssNumRegex, function (match, index) {
            return '`' + scssFilePool[index] + '`';
        });
        fs.writeFileSync(path, contentTemp);
    }
}

function processScss() {
    let index = 0;
  
    while (index < scssFilePool.length) {
        (function (index) {
            // debugger
            fs.readFile(scssFilePool[index], function (e, data) {
                sass.render({
                    file: scssFilePool[index],
                    data: data.toString()
                }, function (e, output) {
                    scssFilePool[index] = output.css.toString().replace(/\\e/g, function (match, e) {
                        // 对content中的类似'\e630'中的\e进行处理
                        return '\\\\e';
                    }).replace(/\\E/g, function (match, e) {
                        // 对content中的类似'\E630'中的\E进行处理
                        return '\\\\E';
                    }).replace(/\\20/g, function (match, e) {
                        // 对content中的类似'\20'中的\20进行处理
                        return '\\\\20';
                    }).replace(/`/g, function (match, e) {
                        // 处理css中`符号
                        return "'"
                    });
                    doneOne();
                })
            })
        })(index);
        index += 1
    }
}

getTsFile(genPath, transformStyleUrls);
handledLessFileCount = 0;
processScss();
