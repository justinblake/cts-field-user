import {Component} from '@angular/core';
import {NavController, LoadingController, App, Platform} from 'ionic-angular';
import {CallNumber} from '@ionic-native/call-number';
import {DrivingDirectionsPage} from '../driving-directions/driving-directions';
import {LoginPage} from '../login/login';
import {GoogleMapsManager} from '../../providers/google-maps-manager';
import {Geolocation} from '@ionic-native/geolocation';
import {TaskManager} from '../../providers/task-manager';
import {UserManager} from '../../providers/user-manager';
import {Utils} from '../../utils/utils';
import {Animations} from '../../animations/animations';
import {Diagnostic} from "@ionic-native/diagnostic";

@Component({
    selector: 'page-foreman',
    templateUrl: 'foreman.html',
    animations: [
        Animations.expandCollapse
    ]
})

export class ForemanPage {

    tasks: any;
    showTasks: boolean = true;
    divState: string = 'hide';
    newStart: any = '';
    expandTaskId: number = -1;
    delayNotes: any = [];
    employeeId: number = -1;
    isIos: boolean = false;

    constructor(public navCtrl: NavController,
                public taskMgr: TaskManager,
                public plt: Platform,
                private mapsManager: GoogleMapsManager,
                private loadingCtrl: LoadingController,
                private userMgr: UserManager,
                private appCtrl: App,
                private geolocation: Geolocation,
                private utils: Utils,
                private callNumber: CallNumber,
                private diagnostic: Diagnostic) {

        this.divState = 'collapse';

        if (this.plt.is('ios')) {
            this.isIos = true;
        }
    }

    ionViewDidLoad() {
        console.log('View is loaded');
    }

    ionViewDidEnter() {
        console.log('HomePage View is entered');
        this.getForemanTasks();
    }

    toggleDivState() {
        let states = {
            expand: 'collapse',
            collapse: 'expand'
        };
        this.divState = states[this.divState];
    }

    // /** logs the user out of the app */
    logout() {
        this.userMgr.logout().then(response => {
            this.appCtrl.getRootNav().push(LoginPage);
        })
    }

    callPhone(number) {
        this.callNumber.callNumber(number, false)
            .then(() => console.log('Launched dialer!'))
            .catch(() => console.log('Error launching dialer'));
    }

    //  callPhone(mobNumber: string) {
    //     window.open("tel:" + '1' + mobNumber);
    // }

    getForemanTasks() {
        this.utils.presentLoading();
        this.taskMgr.loadForemanTasks().then((response: any) => {
            this.tasks = response.data;

            // Ugly code for parsing the time since iOS doesn't allow date pipes with multiple key/value pairs
            for (let i = 0; i < this.tasks.length; i++) {
                let projectTasks = this.tasks[i].job_tasks;
                for (let j = 0; j < projectTasks.length; j++) {
                    projectTasks[j].newStart = projectTasks[j].task_start_time;
                    let combined = projectTasks[j].newStart[0] + '' + projectTasks[j].newStart[1];
                    let combinedInt = parseInt(combined);
                    let newTime: string;
                    if (combinedInt > 12) {
                        combinedInt -= 12;
                        newTime = combinedInt + ':' + projectTasks[j].newStart[3] + projectTasks[j].newStart[4] + ' ' + 'PM';
                    } else if (combinedInt > 9 && combinedInt <= 12) {
                        newTime = combinedInt + ':' + projectTasks[j].newStart[3] + projectTasks[j].newStart[4] + ' ' + 'AM';
                    } else if (combinedInt < 10) {
                        let morning = projectTasks[j].newStart[1];
                        newTime = morning + ':' + projectTasks[j].newStart[3] + projectTasks[j].newStart[4] + ' ' + 'AM';
                    }
                    projectTasks[j].newTime = newTime;
                }

                projectTasks.sort(function (a, b) {
                    return (a.task_start_time > b.task_start_time) ? 1 : ((b.task_start_time > a.task_start_time) ? -1 : 0);
                })
            }
            this.utils.dismissLoading();
        })
    }

    loadNotes(empId, taskId) {
        this.utils.presentLoading();
        if (this.employeeId === empId) {
            this.employeeId = -1;
            this.utils.dismissLoading();
        } else {
            this.employeeId = empId;
            this.taskMgr.loadSpecificTaskUserLog(empId, taskId).then((response: any) => {
                this.delayNotes = [];
                for (let i = 0; i < response.data.length; i++) {
                    if (response.data[i].status_id === 5 || response.data[i].status_id === 6 || response.data[i].status_id === 7 || response.data[i].status_id === 12) {
                        let note = response.data[i].notes;
                        let combined = response.data[i].timestamp[11] + '' + response.data[i].timestamp[12];
                        let combinedInt = parseInt(combined);
                        let time = '';

                        if (combinedInt > 12) {
                            combinedInt -= 12;
                            time = combinedInt + ':' + response.data[i].timestamp[14] + response.data[i].timestamp[15] + ' ' + 'PM';
                        } else if (combinedInt > 9 && combinedInt <= 12) {
                            time = combinedInt + ':' + response.data[i].timestamp[14] + response.data[i].timestamp[15] + ' ' + 'AM';
                        } else if (combinedInt < 10) {
                            let morning = response.data[i].timestamp[12];
                            console.log('morning', JSON.stringify(morning));
                            time = morning + ':' + response.data[i].timestamp[14] + response.data[i].timestamp[15] + ' ' + 'AM';
                        }

                        let newEntry = {
                            notes: note,
                            timestamp: time
                        };

                        this.delayNotes.push(newEntry);
                    }
                }
                this.utils.dismissLoading();
            })
        }
    }

    refreshCrews() {
        this.getForemanTasks();
    }

    showDrivingDirections(lat, lon) {
        this.utils.presentLoading();
        let locEnabled: boolean = false;

        let successCallback = (isAvailable) => {
            if (isAvailable) {
                locEnabled = true;
                return locEnabled;
            } else {
                this.utils.presentToast("Please enable your location in device settings", true);
                return;
            }
        };
        let errorCallback = (e) => {
            this.utils.presentToast("Please enable your location in device settings", true);
            this.utils.dismissLoading();
        }

        this.diagnostic.isLocationEnabled().then(successCallback).then(resp => {
            if (locEnabled) {
                let destination = `${lat},${lon}`;
                this.geolocation.getCurrentPosition({timeout: 15000}).then((position) => {
                    let origin = `${position.coords.latitude},${position.coords.longitude}`;
                    return this.mapsManager.getDirections(origin, destination);
                }).then((response) => {
                    let params = {
                        directions: response
                    };
                    setTimeout(() => {
                        this.navCtrl.push(DrivingDirectionsPage, params);
                        this.utils.dismissLoading();
                    }, 2000)
                }).catch((error) => {
                    this.utils.dismissLoading();
                    console.log(`ERROR: ${Utils.toJson(error)}`);
                    this.utils.presentToast("Please enable your location in device settings", true);
                })
            }
            if (locEnabled === false) {
                this.utils.dismissLoading();
            }
        }).catch(errorCallback);
    }

    expandTask(id) {
        this.employeeId = -1;
        this.delayNotes = [];
        if (this.expandTaskId === id) {
            this.expandTaskId = -1;
        } else {
            this.expandTaskId = id;
        }
    }


}
